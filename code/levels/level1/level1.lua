-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["floor-1"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "floor-1", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   198.5, 324  ,  -206.5, 324  ,  198.5, 246  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-1", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -206.5, 324  ,  -140.5, 290  ,  -28.5, 288  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-1", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -206.5, 324  ,  -158.5, 270  ,  -140.5, 290  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-1", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -158.5, 270  ,  -206.5, 324  ,  -206.5, -316  ,  -158.5, -318  }
                    }
                    
                    
                    
		}
		
		, 
		["floor-2"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "floor-2", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -95, -30.5  ,  139, -24.5  ,  313, 10.5  ,  310, 71.5  ,  -317, 71.5  ,  -317, -7.5  }
                    }
                    
                    
                    
		}
		
		, 
		["floor-3"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "floor-3", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -208.5, -146.5  ,  -70.5, -142.5  ,  -222.5, -40.5  ,  -322.5, -134.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-3", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   323.5, 147.5  ,  -222.5, 145.5  ,  117.5, -64.5  ,  323.5, -4.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-3", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -222.5, 145.5  ,  -222.5, -40.5  ,  -70.5, -142.5  ,  117.5, -64.5  }
                    }
                    
                    
                    
		}
		
		, 
		["floor-4"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "floor-4", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   299, 35  ,  299, 85  ,  -303, 83  ,  -303, -67  }
                    }
                    
                    
                    
		}
		
		, 
		["floor-5"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "floor-5", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -169, 300  ,  -211, 341  ,  -209, 288  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-5", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   98, 296  ,  211, 341  ,  -211, 341  ,  -169, 300  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-5", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   150, 235  ,  211, 341  ,  98, 296  }
                    }
                     ,
                    {
                    pe_fixture_id = "floor-5", density = 2, friction = 0.5, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   211, -331  ,  211, 341  ,  150, 235  ,  149, -333  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

